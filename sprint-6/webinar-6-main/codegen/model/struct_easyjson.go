// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package smartyapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "record_type":
			out.RecordType = string(in.String())
		case "zip_type":
			out.ZipType = string(in.String())
		case "county_fips":
			out.CountyFips = string(in.String())
		case "county_name":
			out.CountyName = string(in.String())
		case "carrier_route":
			out.CarrierRoute = string(in.String())
		case "congressional_district":
			out.CongressionalDistrict = string(in.String())
		case "rdi":
			out.Rdi = string(in.String())
		case "elot_sequence":
			out.ElotSequence = string(in.String())
		case "elot_sort":
			out.ElotSort = string(in.String())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "precision":
			out.Precision = string(in.String())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "utc_offset":
			out.UtcOffset = int(in.Int())
		case "dst":
			out.Dst = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RecordType != "" {
		const prefix string = ",\"record_type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RecordType))
	}
	if in.ZipType != "" {
		const prefix string = ",\"zip_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZipType))
	}
	if in.CountyFips != "" {
		const prefix string = ",\"county_fips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountyFips))
	}
	if in.CountyName != "" {
		const prefix string = ",\"county_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountyName))
	}
	if in.CarrierRoute != "" {
		const prefix string = ",\"carrier_route\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CarrierRoute))
	}
	if in.CongressionalDistrict != "" {
		const prefix string = ",\"congressional_district\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CongressionalDistrict))
	}
	if in.Rdi != "" {
		const prefix string = ",\"rdi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rdi))
	}
	if in.ElotSequence != "" {
		const prefix string = ",\"elot_sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElotSequence))
	}
	if in.ElotSort != "" {
		const prefix string = ",\"elot_sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ElotSort))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	if in.Precision != "" {
		const prefix string = ",\"precision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Precision))
	}
	if in.TimeZone != "" {
		const prefix string = ",\"time_zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeZone))
	}
	if in.UtcOffset != 0 {
		const prefix string = ",\"utc_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UtcOffset))
	}
	if in.Dst {
		const prefix string = ",\"dst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Dst))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel(l, v)
}
func easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(in *jlexer.Lexer, out *Components) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "primary_number":
			out.PrimaryNumber = string(in.String())
		case "street_predirection":
			out.StreetPredirection = string(in.String())
		case "street_name":
			out.StreetName = string(in.String())
		case "street_suffix":
			out.StreetSuffix = string(in.String())
		case "city_name":
			out.CityName = string(in.String())
		case "state_abbreviation":
			out.StateAbbreviation = string(in.String())
		case "zipcode":
			out.Zipcode = string(in.String())
		case "plus_4_code":
			out.Plus4Code = string(in.String())
		case "delivery_point":
			out.DeliveryPoint = string(in.String())
		case "delivery_point_check_digit":
			out.DeliveryPointCheckDigit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(out *jwriter.Writer, in Components) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrimaryNumber != "" {
		const prefix string = ",\"primary_number\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PrimaryNumber))
	}
	if in.StreetPredirection != "" {
		const prefix string = ",\"street_predirection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreetPredirection))
	}
	if in.StreetName != "" {
		const prefix string = ",\"street_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreetName))
	}
	if in.StreetSuffix != "" {
		const prefix string = ",\"street_suffix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreetSuffix))
	}
	if in.CityName != "" {
		const prefix string = ",\"city_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CityName))
	}
	if in.StateAbbreviation != "" {
		const prefix string = ",\"state_abbreviation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StateAbbreviation))
	}
	if in.Zipcode != "" {
		const prefix string = ",\"zipcode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zipcode))
	}
	if in.Plus4Code != "" {
		const prefix string = ",\"plus_4_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Plus4Code))
	}
	if in.DeliveryPoint != "" {
		const prefix string = ",\"delivery_point\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeliveryPoint))
	}
	if in.DeliveryPointCheckDigit != "" {
		const prefix string = ",\"delivery_point_check_digit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeliveryPointCheckDigit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Components) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Components) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Components) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Components) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel1(l, v)
}
func easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(in *jlexer.Lexer, out *Analysis) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dpv_match_code":
			out.DpvMatchCode = string(in.String())
		case "dpv_footnotes":
			out.DpvFootnotes = string(in.String())
		case "dpv_cmra":
			out.DpvCmra = string(in.String())
		case "dpv_vacant":
			out.DpvVacant = string(in.String())
		case "active":
			out.Active = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(out *jwriter.Writer, in Analysis) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DpvMatchCode != "" {
		const prefix string = ",\"dpv_match_code\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DpvMatchCode))
	}
	if in.DpvFootnotes != "" {
		const prefix string = ",\"dpv_footnotes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DpvFootnotes))
	}
	if in.DpvCmra != "" {
		const prefix string = ",\"dpv_cmra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DpvCmra))
	}
	if in.DpvVacant != "" {
		const prefix string = ",\"dpv_vacant\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DpvVacant))
	}
	if in.Active != "" {
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Analysis) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Analysis) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Analysis) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Analysis) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComVmaruninGoBasic2Webinar6CodegenModel2(l, v)
}
