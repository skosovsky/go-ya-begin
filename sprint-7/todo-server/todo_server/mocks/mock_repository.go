// Code generated by MockGen. DO NOT EDIT.
// Source: yp-examples/todo_server/internal/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks -destination=../../mocks/mock_repository.go yp-examples/todo_server/internal/repository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "yp-examples/todo_server/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockRepository) AddTodo(arg0 model.Todo) model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", arg0)
	ret0, _ := ret[0].(model.Todo)
	return ret0
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockRepositoryMockRecorder) AddTodo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockRepository)(nil).AddTodo), arg0)
}

// DeleteTodo mocks base method.
func (m *MockRepository) DeleteTodo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockRepositoryMockRecorder) DeleteTodo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockRepository)(nil).DeleteTodo), arg0)
}

// GetTodos mocks base method.
func (m *MockRepository) GetTodos() []model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]model.Todo)
	return ret0
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockRepositoryMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockRepository)(nil).GetTodos))
}

// UpdateTodo mocks base method.
func (m *MockRepository) UpdateTodo(arg0 model.Todo) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockRepositoryMockRecorder) UpdateTodo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockRepository)(nil).UpdateTodo), arg0)
}
